// Code generated by mockery v2.46.0. DO NOT EDIT.

package usecasesmock

import (
	context "context"

	domain "github.com/guillospy92/crabi/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserAuthUseCaseInterfaceMock is an autogenerated mock type for the UserAuthUseCaseInterface type
type UserAuthUseCaseInterfaceMock struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserAuthUseCaseInterfaceMock) Login(ctx context.Context, email string, password string) (*domain.UserAuth, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.UserAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.UserAuth, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.UserAuth); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserAuth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserAuthUseCaseInterfaceMock creates a new instance of UserAuthUseCaseInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAuthUseCaseInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAuthUseCaseInterfaceMock {
	mock := &UserAuthUseCaseInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
